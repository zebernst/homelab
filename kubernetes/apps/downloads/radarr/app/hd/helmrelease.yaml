---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app radarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: synology-csi-driver
      namespace: kube-system
  values:
    controllers:
      radarr:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16
            envFrom: &envFrom
              - secretRef:
                  name: radarr-secret
        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/radarr-develop
              tag: 5.19.1.9704@sha256:a6fa77bd329d9acefc366109579d4175fac54d646c973ca4b0b0f91e463d9dbd
            env:
              RADARR__APP__INSTANCENAME: Radarr
              RADARR__APP__THEME: dark
              RADARR__AUTH__METHOD: External
              RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
              RADARR__LOG__DBENABLED: "False"
              RADARR__LOG__LEVEL: info
              RADARR__SERVER__PORT: &port 80
              RADARR__UPDATE__BRANCH: develop
              TZ: America/New_York
            envFrom: *envFrom
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 1Gi

          exporter:
            dependsOn: app
            image:
              repository: ghcr.io/onedr0p/exportarr
              tag: v2.0.1
            args: ["radarr"]
            env:
              PORT: &metricsPort 9707
              URL: "http://{{ .Release.Name }}"
              ENABLE_ADDITIONAL_METRICS: "true"
              ENABLE_UNKNOWN_QUEUE_ITEMS: "true"
              API_KEY:
                valueFrom:
                  secretKeyRef:
                    name: radarr-secret
                    key: RADARR__AUTH__APIKEY
            probes:
              liveness: &metricsProbes
                <<: *probes
                spec:
                  httpGet:
                    path: /healthz
                    port: *metricsPort
              readiness: *metricsProbes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: [ "ALL" ] }

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: ${APP_UID:-1024}
        runAsGroup: ${APP_GID:-100}
        fsGroup: ${APP_GID:-100}
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: radarr
        nameOverride: *app
        ports:
          http:
            port: *port
          metrics:
            port: *metricsPort
    ingress:
      lan:
        annotations:
          external-dns.alpha.kubernetes.io/target: internal.zebernst.dev
        className: internal
        hosts:
          - host: "{{ .Release.Name }}.zebernst.dev"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
      ts:
        className: tailscale
        hosts:
          - host: &tsHost "{{ .Release.Name }}.kite-harmonic.ts.net"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
        tls:
          - hosts:
            - *tsHost

    serviceMonitor:
      app:
        enabled: true
        serviceName: *app
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 5m
            scrapeTimeout: 1m
            relabelings:
              - action: labeldrop
                regex: pod
              - action: replace
                replacement: *app
                targetLabel: instance

    persistence:
      config:
        type: emptyDir
      cache:
        existingClaim: radarr-cache
        advancedMounts:
          radarr:
            app:
            - path: /config/MediaCover
              subPath: MediaCover
      scripts:
        type: configMap
        name: radarr-configmap
        defaultMode: 0775
        advancedMounts:
          radarr:
            app:
            - path: /scripts/pushover-notify.sh
              subPath: pushover-notify.sh
              readOnly: true
      tmp:
        type: emptyDir
      media:
        type: nfs
        server: nas.internal
        path: /volume1/media
        advancedMounts:
          radarr:
            app:
            - path: /media/movies
              subPath: movies
            - path: /media/downloads/qbittorrent/seeding
              subPath: downloads/qbittorrent/seeding
